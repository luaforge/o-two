// **********************************************************************
//
// Generated by the ORBacus IDL-to-C++ Translator
//
// Copyright (c) 2000
// Object Oriented Concepts, Inc.
// Billerica, MA, USA
//
// All Rights Reserved
//
// **********************************************************************

// Version: 4.0.5

#include <OB/CORBAClient.h>
#include <apptest.h>

#ifndef OB_INTEGER_VERSION
#   error No ORBacus version defined! Is <OB/CORBA.h> included?
#endif

#ifndef OB_NO_VERSION_CHECK
#   if (OB_INTEGER_VERSION != 4000500L)
#       error ORBacus version mismatch!
#   endif
#endif

namespace AppTest
{

OB::TypeCodeConst _tc_Testing(
"016a29400e0000002c000000010000001800000049444c3a417070546573742f54657374696e6"
"73a312e30000800000054657374696e6700"
);

} // End of namespace AppTest

//
// IDL:AppTest/Testing:1.0
//
const char* AppTest::Testing::ids_[] =
{
    "IDL:AppTest/Testing:1.0",
    0
};

OB::MarshalStubImpl_ptr
AppTest::Testing::_OB_createMarshalStubImpl()
{
    return new OBMarshalStubImpl_AppTest::Testing;
}

void
OBDuplicate(AppTest::Testing_ptr p)
{
    if(p)
        p -> _OB_incRef();
}

void
OBRelease(AppTest::Testing_ptr p)
{
    if(p)
        p -> _OB_decRef();
}

AppTest::Testing_ptr
AppTest::Testing::_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        Testing_ptr v = dynamic_cast<Testing_ptr>(p);
        if(v)
            return _duplicate(v);

        if(p -> _is_a(ids_[0]))
        {
            Testing_ptr val = new Testing;
            val -> _OB_copyFrom(p);
            return val;
        }
    }

    return _nil();
}

AppTest::Testing_ptr
AppTest::Testing::_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        CORBA::Object_var obj = p -> _to_object();
        return _narrow(obj);
    }
    return _nil();
}

const char**
AppTest::Testing::_OB_ids() const
{
    return ids_;
}

const char**
AppTest::Testing::_OB_staticIds()
{
    return ids_;
}

void
OBMarshal(AppTest::Testing_ptr _ob_v, OB::OutputStreamImpl* _ob_out)
{
    _ob_out -> write_Object(_ob_v);
}

void
OBUnmarshal(AppTest::Testing_ptr& _ob_v, OB::InputStreamImpl* _ob_in)
{
    AppTest::Testing_var old = _ob_v;
    CORBA::Object_var p = _ob_in -> read_Object();

    if(!CORBA::is_nil(p))
    {
        _ob_v = new AppTest::Testing;
        _ob_v -> _OB_copyFrom(p);
    }
    else
        _ob_v = AppTest::Testing::_nil();
}

void
operator<<=(CORBA::Any& any, AppTest::Testing_ptr* v)
{
    any.replace(AppTest::_tc_Testing, (CORBA::Object_ptr)*v, true);
}

void
operator<<=(CORBA::Any& any, AppTest::Testing_ptr v)
{
    AppTest::Testing_ptr val = AppTest::Testing::_duplicate(v);
    any <<= &val;
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, AppTest::Testing_ptr& v)
{
    if(any.check_type(AppTest::_tc_Testing))
    {
        CORBA::Object_ptr val = (CORBA::Object_ptr)any.value();

        if(!CORBA::is_nil(val))
        {
            if(!(v = dynamic_cast<AppTest::Testing_ptr>(val)))
            {
                v = new AppTest::Testing;
                v -> _OB_copyFrom(val);
                (CORBA::Any&)any <<= &v;
            }
        }
        else
            v = AppTest::Testing::_nil();

        return true;
    }
    else
        return false;
}

//
// IDL:AppTest/Testing/say:1.0
//
void
AppTest::Testing::say(const char* _ob_a0)
{
    bool _ob_retry = true;
    while(true)
    {
        OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
        OBStubImpl_AppTest::Testing_ptr _ob_stubImpl = dynamic_cast<OBStubImpl_AppTest::Testing_ptr>(_ob_stubImplBase.in());
        try
        {
            _ob_stubImpl -> say(_ob_a0);
            return;
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry);
        }
    }
}

//
// IDL:AppTest/Testing:1.0
//
void
OBDuplicate(OBStubImpl_AppTest::Testing_ptr p)
{
    if(p)
        p -> _OB_incRef();
}

void
OBRelease(OBStubImpl_AppTest::Testing_ptr p)
{
    if(p)
        p -> _OB_decRef();
}

//
// IDL:AppTest/Testing/say:1.0
//
void
OBMarshalStubImpl_AppTest::Testing::say(const char* _ob_a0)
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("say", true);
        try
        {
            OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_down);
            try
            {
                _ob_out -> write_string(_ob_a0);
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_marshalEx(_ob_down, _ob_ex);
            }
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            _OB_preUnmarshal(_ob_down);
            _OB_postUnmarshal(_ob_down);
            return;
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}
